<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg
    id="svg"
    class="svg"
    viewBox="-960 -512 1920 1024"
    fill="black"
    style="background-color: black;"
    xmlns="http://www.w3.org/2000/svg"
    stroke-linecap="round"
    stroke-linejoin="round"
    stroke-width="1"
    xml:space="preserve"
    align="center"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    >

// <!-- !DOCTYPE html -->
// <!-- html -->
// <!-- head></head -->
// <!-- body id="body" -->
// <!-- canvas id="canvas" xmlns="http://www.w3.org/1999/xhtml"-->

//    viewBox="-500 -500 1000 1000"
    // width="99%"
    // height="99%"
    // * stroke="white"
    // * onclick="initSound()"

    // For copying
    // ! ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // * ────────────────────────────────────────────────
    // ? ════════════════════════════════════════════════
    // % ████████████████████████████████████████████████
    //@ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    //! ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡
    //* °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
    //? ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    //! ┌───────────────────────────────────────────────
    //! │                                               
    //! └───────────────────────────────────────────────

    //! important
    //* deprecated
    //? question
    //% TODO
    //@ FIXME
    //: UNDEFINED



    <style>
    .map {
        pointer-events:none;
    }
    </style>
    // * 
    // * ─────────────────────────────── old vars ─────────────────
    // *  viewBox="-960 -540 1920 1080"
    // * viewBox="-480 -270 960 540"
    // * viewBox="-540 -960 1080 1920"
    // * viewBox="-960 -540 1920 1080"
    // * viewBox="-960 -540 1920 1080"
    // * transform="translate(0 -0) rotate(-90) "
    // * transform="translate(450 -400) rotate(-90) "
    // * transform="rotate(-90 50 100)"
    // * <rect x="0" y="0" width="400" height="400"  style="stroke: #ffffff; fill:none;"/>
    // * width="400"
    // * height="400"
    // * version="1.1"
    // * fill-rule="evenodd"
    // * zoomAndPan="magnify" width="1150" height="767"
    // * ────────────────────────────────────────────────

    //@ FIXME: not sure if I still need this
    <defs>
        <radialGradient id="CircleGradient">
            <stop offset="10%" stop-color="gold" />
            <stop offset="95%" stop-color="red" />
        </radialGradient>
        // <linearGradient id="fillGradient">
        //     <stop offset="10%" stop-color="gold" />
        //     <stop offset="95%" stop-color="red" />
        // </linearGradient>
        // <linearGradient id="strokeGradient">
        //     <stop offset="10%" stop-color="gold" />
        //     <stop offset="95%" stop-color="red" />
        // </linearGradient>
    </defs>



    //?  you must wrap scripts in CDATA tags as SVG should be valid XML 
    //@ %PRAGMA:delete_next_line:0:
    <script type="text/javascript" xlink:href="clock_1_lib.js" xlink:actuatpe="onLoad" xlink:show="other" xlink:type="simple" />

    //@ %PRAGMA:delete_next_line:0
    <script type="text/javascript" xlink:href="clock_1_data.js" xlink:actuate="onLoad" xlink:show="other" xlink:type="simple" />

    <script type="text/javascript"><![CDATA[
            //@ %PRAGMA:insert:clock_1_data.js:
            //@ vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            //@ INSERT FUNCTIONS HERE (and comment out script above)
            //@ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            //@ %PRAGMA:insert:clock_1_lib.js
            //? when used as an object, allow attributes to be changed by params passed in the query string
            var paramList = [];
            // var paramList = ['UP'];
            var refs = []; //? holds qs name/values
            //? get everything but the qs
            var href = window.location.protocol+'//'+window.location.hostname+window.location.pathname //document.defaultView.location.href;
            //? get everything and extract the qs
            var fullhref = document.defaultView.location.href
            log(fullhref)
            if ( -1 != fullhref.indexOf("?") ) {
                paramList = fullhref.split("?")[1].split(/&|;/);
                for ( let p = 0, pLen = paramList.length; pLen > p; p++ ) {
                    var eachParam = paramList[ p ];
                    var valList = eachParam.split("=");
                    var name = unescape(valList[0]);
                    var value = unescape(valList[1]);
                    refs[name] = value;
                }
            }
            //* Used to conver MP3 to Base-64
            //* https://codebeautify.org/mp3-to-base64-converter 
            //* https://codepen.io/xewl/pen/NjyRJx



            //? presets as query strings
            var preqs = []
            preqs.push("up=1000&de=7.5&aN=5&aR=0&ca0=0&ca1=0&ca2=0&ca3=0&ca4=0&ca5=0&aV=1&aO=0.18&aG=1&aX=1&aK=4&aU=1&aA=2?up=10&de=0.0146484375&aN=15&aR=1&a0=0&aV=1&aO=0.18&aG=1&aX=0.29&aK=4&aU=1&aA=2");
            preqs.push("?up=1000&de=7.5&aN=11&aR=0&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=0&aO=1&aG=1&aX=1&aK=0&aU=1&aA=2 ");
            preqs.push("?up=1000&de=7.5&aN=11&aR=0&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=1&aO=1&aG=1&aX=1&aK=0&aU=1&aA=3 ");
            preqs.push("?up=1000&de=7.5&aN=5&aR=0&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=1&aO=0.18&aG=1&aX=1&aK=4&aU=1&aA=1 ");
            preqs.push("?up=1000&de=7.5&aN=5&aR=2&ca0=1&ca1=1&ca2=1&ca3=1&ca4=1&ca5=1&ca6=1&aV=1&aO=0.18&aG=1&aX=1&aK=4&aU=0&aA=3 ");


            var cumxy = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]

            var pianoNotes = [
            a3,b3,c3,d3,e3,f3,g3,
            a4,b4,c4,d4,e4,f4,g4,
            a5,b5,c5,d5,e5,f5,g5,
            ]
            var pianoNotes6 = [
            [b3,d3,f3],
            [a4,c4,e4,g4],
            [b5,d5,f5],
            [b3,d3,f3],
            [a4,c4,e4,g4],
            [b5,d5,f5],
            ]


            var genangLEFT = [5,5,5,5,5,5]
            var genangRIGHT = [5,5,5,5,5,5]


            var names_of_colors = [
                "7-color spectrum","shifted 7-color", "random 7-color",
                "tholo1","tholo2",
                "David Hockney","Van Gogh","Rembrandt","Picasso","Hopper","Monet","Carravaggio",
                "Corn","Sunset","Pastel","Vintage","Explosion","psychedelic",
            ]
            var colors2 = [
                //? standard spectrum


                ['red','orange','violet','#00ff00','cyan','blue','magenta'], //?           ✅✅
                ['red','orange','violet','#00ff00','cyan','blue','magenta'], //? place holder for shifter colors
                ['red','orange','violet','#00ff00','cyan','blue','magenta'], //? place holder for random colors

                ['blue','cyan','green','yellow','red','magenta'], //? tholonic1
                ['blue','green','red','yellow','cyan','magenta'], //? tholonic2

                ['#40686A','#317CA6','#A28671','#52A4B6','#88C8E4','#DABDB3'], //? David Hockney
                ['#14272D','#1E3D33','#7D844D','#306EBB','#EAA159','#ECCD52'], //? Van Gogh
                ['#1F2825','#2D4B38','#BE6314','#F7EBAF','#706E51','#F7EBAF'], //? Rembrandt
                ['#465295','#B7563F','#DACA6A','#ED973E','#ED973E','#CDC1CE'], //? Picasso
                ['#4D5847','#4D5847','#CA4E29','#2D75A9','#869881','#C46F29'], //? Hopper
                ['#264C13','#CCA46A','#A1612D','#876F24','#79A32C','#DCD293'], //? Monet
                ['#301C16','#583219','#CD844A','#AE9068','#8A3521','#635020'], //? Caravaggio
//                ['#503E3C','#93B9E4','#AB8152','#EEC667','#B87143','#E27D4A'], //? Dali

                ['#FBEC5D','#F2C649','#E37154','#C2423D','#974735','#682E1F'], //? corn
                ['#360258','#F66216','#DF2945','#AF1D61','#02117E','#FFDB48'], //? sunset   ✅✅✅
                ['#D9F2E8','#AECAE7','#9592AD','#FFBABA','#FFE7C3','#BBE0C2'], //? pastel   ✅✅✅
                ['#697398','#6CAFB0','#FFDCA8','#FAA578','#C56692','#79518B'], //? vintage  ✅✅✅
                ['#0C1F77','#AA1011','#D50101','#E48200','#FAB301','#020C42'], //? explosion    ✅✅
                ['#F3DE00','#EE0019','#01F24B','#F201CC','#5201C3','#01E1E8'], //? psychedelic  ✅✅
                // ['#','#','#','#','#','#'], //? 
                // ['#','#','#','#','#','#'], //? 
                // ['#','#','#','#','#','#'], //? 
                // ['#','#','#','#','#','#'], //? 
                // ['#','#','#','#','#','#'], //? 
                // ['#','#','#','#','#','#'], //? 




                // ['#871493','#FDF041','#ff04ff','#A001B2','#21ABE1','#8F38B7'], //? planets
                // ['#','#','#','#','#','#','#'], //? 
                //? 360 shades of HSV spectrum at S=0.8, V=0.8
                // ["#cc2929","#cc2c29","#cc2e29","#cc3129","#cc3429","#cc3629","#cc3929","#cc3c29","#cc3f29","#cc4129","#cc4429","#cc4729","#cc4929","#cc4c29","#cc4f29","#cc5229","#cc5429","#cc5729","#cc5a29","#cc5c29","#cc5f29","#cc6229","#cc6529","#cc6729","#cc6a29","#cc6d29","#cc7029","#cc7229","#cc7529","#cc7829","#cc7a29","#cc7d29","#cc8029","#cc8329","#cc8529","#cc8829","#cc8b29","#cc8d29","#cc9029","#cc9329","#cc9629","#cc9829","#cc9b29","#cc9e29","#cca029","#cca329","#cca629","#cca929","#ccab29","#ccae29","#ccb129","#ccb429","#ccb629","#ccb929","#ccbc29","#ccbe29","#ccc129","#ccc429","#ccc729","#ccc929","#cccc29","#c9cc29","#c7cc29","#c4cc29","#c1cc29","#becc29","#bccc29","#b9cc29","#b6cc29","#b4cc29","#b1cc29","#aecc29","#abcc29","#a9cc29","#a6cc29","#a3cc29","#a0cc29","#9ecc29","#9bcc29","#98cc29","#96cc29","#93cc29","#90cc29","#8dcc29","#8bcc29","#88cc29","#85cc29","#83cc29","#80cc29","#7dcc29","#7acc29","#78cc29","#75cc29","#72cc29","#70cc29","#6dcc29","#6acc29","#67cc29","#65cc29","#62cc29","#5fcc29","#5ccc29","#5acc29","#57cc29","#54cc29","#52cc29","#4fcc29","#4ccc29","#49cc29","#47cc29","#44cc29","#41cc29","#3fcc29","#3ccc29","#39cc29","#36cc29","#34cc29","#31cc29","#2ecc29","#2ccc29","#29cc29","#29cc2c","#29cc2e","#29cc31","#29cc34","#29cc36","#29cc39","#29cc3c","#29cc3f","#29cc41","#29cc44","#29cc47","#29cc49","#29cc4c","#29cc4f","#29cc52","#29cc54","#29cc57","#29cc5a","#29cc5c","#29cc5f","#29cc62","#29cc65","#29cc67","#29cc6a","#29cc6d","#29cc70","#29cc72","#29cc75","#29cc78","#29cc7a","#29cc7d","#29cc80","#29cc83","#29cc85","#29cc88","#29cc8b","#29cc8d","#29cc90","#29cc93","#29cc96","#29cc98","#29cc9b","#29cc9e","#29cca0","#29cca3","#29cca6","#29cca9","#29ccab","#29ccae","#29ccb1","#29ccb4","#29ccb6","#29ccb9","#29ccbc","#29ccbe","#29ccc1","#29ccc4","#29ccc7","#29ccc9","#29cccc","#29c9cc","#29c7cc","#29c4cc","#29c1cc","#29becc","#29bccc","#29b9cc","#29b6cc","#29b4cc","#29b1cc","#29aecc","#29abcc","#29a9cc","#29a6cc","#29a3cc","#29a0cc","#299ecc","#299bcc","#2998cc","#2996cc","#2993cc","#2990cc","#298dcc","#298bcc","#2988cc","#2985cc","#2983cc","#2980cc","#297dcc","#297acc","#2978cc","#2975cc","#2972cc","#2970cc","#296dcc","#296acc","#2967cc","#2965cc","#2962cc","#295fcc","#295ccc","#295acc","#2957cc","#2954cc","#2952cc","#294fcc","#294ccc","#2949cc","#2947cc","#2944cc","#2941cc","#293fcc","#293ccc","#2939cc","#2936cc","#2934cc","#2931cc","#292ecc","#292ccc","#2929cc","#2c29cc","#2e29cc","#3129cc","#3429cc","#3629cc","#3929cc","#3c29cc","#3f29cc","#4129cc","#4429cc","#4729cc","#4929cc","#4c29cc","#4f29cc","#5229cc","#5429cc","#5729cc","#5a29cc","#5c29cc","#5f29cc","#6229cc","#6529cc","#6729cc","#6a29cc","#6d29cc","#7029cc","#7229cc","#7529cc","#7829cc","#7a29cc","#7d29cc","#8029cc","#8329cc","#8529cc","#8829cc","#8b29cc","#8d29cc","#9029cc","#9329cc","#9629cc","#9829cc","#9b29cc","#9e29cc","#a029cc","#a329cc","#a629cc","#a929cc","#ab29cc","#ae29cc","#b129cc","#b429cc","#b629cc","#b929cc","#bc29cc","#be29cc","#c129cc","#c429cc","#c729cc","#c929cc","#cc29cc","#cc29c9","#cc29c7","#cc29c4","#cc29c1","#cc29be","#cc29bc","#cc29b9","#cc29b6","#cc29b4","#cc29b1","#cc29ae","#cc29ab","#cc29a9","#cc29a6","#cc29a3","#cc29a0","#cc299e","#cc299b","#cc2998","#cc2996","#cc2993","#cc2990","#cc298d","#cc298b","#cc2988","#cc2985","#cc2983","#cc2980","#cc297d","#cc297a","#cc2978","#cc2975","#cc2972","#cc2970","#cc296d","#cc296a","#cc2967","#cc2965","#cc2962","#cc295f","#cc295c","#cc295a","#cc2957","#cc2954","#cc2952","#cc294f","#cc294c","#cc2949","#cc2947","#cc2944","#cc2941","#cc293f","#cc293c","#cc2939","#cc2936","#cc2934","#cc2931","#cc292e","#cc292c","#cc2929"],
            ]

            //% ┌───────────────────────────────────────────────
            //% │ COLOR GENERATORS
            //% └───────────────────────────────────────────────
            var _clr = []
            var S= false
            var V= false

            //? Full color spectrum generator
            for (H=0;H<6;H++) {
                _clr.push(generateColor(H*60))
            }
            colors2.push(_clr)
            names_of_colors.push("7x color spectrum")

            //? B&W spectrum generator
            _clr = []
            S=.8
            V=.8
            for (H=0;H<6;H++) {
                v = HSVtoRGBArray((H*60)/360,S,V)
                // bw = Math.floor((v.r+v.g+v.b)/3)
                // v.r = Math.floor(0.2126 * v.r)
                // v.g = Math.floor(0.7152 * v.g)
                // v.b = Math.floor(0.0722 * v.b)
                // bw = Math.floor(v.r+v.g+v.b)

                v.r = Math.floor(0.2989 * v.r)
                v.g = Math.floor(0.587 * v.g)
                v.b = Math.floor(0.114 * v.b)
                bw = Math.floor(v.r+v.g+v.b)
                log(bw)


                _clr.push("#" 
                    + bw.toString(16).padStart(2,0) 
                    + bw.toString(16).padStart(2,0) 
                    + bw.toString(16).padStart(2,0)
                )
                // jstr(_clr)
            }
            colors2.push(_clr)
            names_of_colors.push("360 BW color spectrum")

// jstr(colors2)
            // debugger





            // norm_0_360 = [0,1.0027855153203342,2.0055710306406684,3.008356545961003,4.011142061281337,5.013927576601671,6.016713091922006,7.01949860724234,8.022284122562674,9.025069637883009,10.027855153203342,11.030640668523677,12.033426183844012,13.036211699164346,14.03899721448468,15.041782729805014,16.044568245125348,17.04735376044568,18.050139275766018,19.05292479108635,20.055710306406684,21.058495821727018,22.061281337047355,23.064066852367688,24.066852367688025,25.069637883008358,26.07242339832869,27.075208913649025,28.07799442896936,29.080779944289695,30.08356545961003,31.08635097493036,32.089136490250695,33.09192200557103,34.09470752089136,35.0974930362117,36.100278551532035,37.10306406685237,38.1058495821727,39.108635097493035,40.11142061281337,41.1142061281337,42.116991643454035,43.11977715877437,44.12256267409471,45.12534818941504,46.128133704735376,47.13091922005571,48.13370473537605,49.136490250696376,50.139275766016716,51.14206128133704,52.14484679665738,53.147632311977716,54.15041782729805,55.15320334261838,56.15598885793872,57.15877437325905,58.16155988857939,59.164345403899716,60.16713091922006,61.16991643454038,62.17270194986072,63.17548746518106,64.17827298050139,65.18105849582172,66.18384401114206,67.1866295264624,68.18941504178272,69.19220055710306,70.1949860724234,71.19777158774373,72.20055710306407,73.20334261838441,74.20612813370474,75.20891364902508,76.2116991643454,77.21448467966574,78.21727019498607,79.22005571030641,80.22284122562674,81.22562674094708,82.2284122562674,83.23119777158774,84.23398328690807,85.23676880222841,86.23955431754874,87.24233983286908,88.24512534818942,89.24791086350974,90.25069637883009,91.25348189415043,92.25626740947075,93.25905292479108,94.26183844011142,95.26462395543176,96.2674094707521,97.27019498607241,98.27298050139275,99.27576601671309,100.27855153203343,101.28133704735377,102.28412256267409,103.28690807799443,104.28969359331477,105.2924791086351,106.29526462395543,107.29805013927576,108.3008356545961,109.30362116991644,110.30640668523677,111.3091922005571,112.31197771587745,113.31476323119777,114.3175487465181,115.32033426183844,116.32311977715878,117.32590529247912,118.32869080779943,119.33147632311977,120.33426183844011,121.33704735376045,122.33983286908077,123.3426183844011,124.34540389972145,125.34818941504179,126.35097493036211,127.35376044568244,128.35654596100278,129.35933147632312,130.36211699164343,131.36490250696377,132.3676880222841,133.37047353760445,134.3732590529248,135.3760445682451,136.37883008356545,137.3816155988858,138.38440111420613,139.38718662952647,140.3899721448468,141.39275766016712,142.39554317548746,143.3983286908078,144.40111420612814,145.40389972144848,146.40668523676882,147.40947075208913,148.41225626740948,149.41504178272982,150.41782729805016,151.42061281337047,152.4233983286908,153.42618384401115,154.4289693593315,155.4317548746518,156.43454038997214,157.43732590529248,158.44011142061282,159.44289693593313,160.44568245125348,161.44846796657382,162.45125348189416,163.45403899721447,164.4568245125348,165.45961002785515,166.4623955431755,167.46518105849583,168.46796657381614,169.47075208913648,170.47353760445682,171.47632311977716,172.47910863509748,173.48189415041782,174.48467966573816,175.4874651810585,176.49025069637884,177.49303621169915,178.4958217270195,179.49860724233983,180.50139275766017,181.5041782729805,182.50696378830085,183.50974930362116,184.5125348189415,185.51532033426184,186.51810584958216,187.52089136490252,188.52367688022284,189.5264623955432,190.52924791086352,191.53203342618383,192.5348189415042,193.5376044568245,194.54038997214482,195.5431754874652,196.5459610027855,197.54874651810587,198.55153203342618,199.5543175487465,200.55710306406687,201.55988857938718,202.56267409470755,203.56545961002786,204.56824512534817,205.57103064066854,206.57381615598885,207.57660167130916,208.57938718662953,209.58217270194984,210.5849582172702,211.58774373259052,212.59052924791087,213.5933147632312,214.59610027855152,215.59888579387186,216.6016713091922,217.60445682451254,218.60724233983288,219.6100278551532,220.61281337047353,221.61559888579387,222.6183844011142,223.62116991643452,224.6239554317549,225.6267409470752,226.62952646239555,227.6323119777159,228.6350974930362,229.63788300835657,230.64066852367688,231.64345403899722,232.64623955431756,233.64902506963787,234.65181058495824,235.65459610027855,236.65738161559887,237.66016713091923,238.66295264623955,239.66573816155991,240.66852367688023,241.67130919220054,242.6740947075209,243.67688022284122,244.67966573816153,245.6824512534819,246.6852367688022,247.68802228412258,248.6908077994429,249.6935933147632,250.69637883008357,251.6991643454039,252.70194986072423,253.70473537604457,254.70752089136488,255.71030640668525,256.71309192200556,257.7158774373259,258.71866295264624,259.7214484679666,260.72423398328687,261.72701949860726,262.72980501392755,263.73259052924794,264.7353760445682,265.73816155988857,266.7409470752089,267.74373259052925,268.7465181058496,269.74930362116993,270.7520891364902,271.7548746518106,272.7576601671309,273.76044568245123,274.7632311977716,275.7660167130919,276.76880222841226,277.7715877437326,278.77437325905294,279.7771587743733,280.7799442896936,281.7827298050139,282.78551532033424,283.7883008356546,284.7910863509749,285.79387186629526,286.7966573816156,287.79944289693594,288.8022284122563,289.80501392757657,290.80779944289696,291.81058495821725,292.81337047353765,293.81615598885793,294.81894150417827,295.8217270194986,296.82451253481895,297.8272980501393,298.83008356545963,299.8328690807799,300.8356545961003,301.8384401114206,302.84122562674094,303.8440111420613,304.8467966573816,305.84958217270196,306.8523676880223,307.8551532033426,308.857938718663,309.86072423398326,310.8635097493036,311.86629526462394,312.8690807799443,313.8718662952646,314.87465181058496,315.8774373259053,316.88022284122565,317.88300835654593,318.88579387186627,319.8885793871866,320.89136490250695,321.8941504178273,322.89693593314763,323.899721448468,324.9025069637883,325.90529247910865,326.90807799442894,327.91086350974933,328.9136490250696,329.91643454039,330.9192200557103,331.92200557103064,332.924791086351,333.9275766016713,334.93036211699166,335.933147632312,336.9359331476323,337.9387186629527,338.94150417827296,339.9442896935933,340.94707520891365,341.949860724234,342.9526462395543,343.95543175487467,344.95821727019495,345.96100278551535,346.96378830083563,347.966573816156,348.9693593314763,349.97214484679665,350.974930362117,351.97771587743733,352.9805013927577,353.983286908078,354.9860724233983,355.98885793871864,356.991643454039,357.9944289693593,358.99721448467966,360,360];
            // norm_180_180 = [-180,-178.99721448467966,-177.99442896935932,-176.991643454039,-175.98885793871867,-174.98607242339833,-173.983286908078,-172.98050139275767,-171.97771587743733,-170.974930362117,-169.97214484679665,-168.9693593314763,-167.966573816156,-166.96378830083566,-165.96100278551532,-164.95821727019498,-163.95543175487467,-162.95264623955433,-161.949860724234,-160.94707520891365,-159.9442896935933,-158.941504178273,-157.93871866295265,-156.9359331476323,-155.93314763231197,-154.93036211699163,-153.92757660167132,-152.92479108635098,-151.92200557103064,-150.9192200557103,-149.91643454038996,-148.91364902506965,-147.9108635097493,-146.90807799442896,-145.90529247910865,-144.9025069637883,-143.89972144846797,-142.89693593314763,-141.8941504178273,-140.89136490250695,-139.88857938718664,-138.8857938718663,-137.88300835654596,-136.88022284122565,-135.8774373259053,-134.87465181058496,-133.87186629526462,-132.86908077994428,-131.86629526462394,-130.86350974930363,-129.8607242339833,-128.85793871866295,-127.85515320334261,-126.85236768802228,-125.84958217270196,-124.84679665738162,-123.84401114206128,-122.84122562674095,-121.83844011142061,-120.83565459610028,-119.83286908077994,-118.83008356545962,-117.82729805013928,-116.82451253481895,-115.82172701949861,-114.81894150417828,-113.81615598885794,-112.8133704735376,-111.81058495821728,-110.80779944289694,-109.8050139275766,-108.80222841225627,-107.79944289693593,-106.79665738161559,-105.79387186629526,-104.79108635097492,-103.7883008356546,-102.78551532033426,-101.78272980501393,-100.77994428969359,-99.77715877437326,-98.77437325905292,-97.7715877437326,-96.76880222841226,-95.76601671309193,-94.76323119777159,-93.76044568245126,-92.75766016713092,-91.75487465181058,-90.75208913649026,-89.74930362116991,-88.74651810584957,-87.74373259052925,-86.74094707520892,-85.73816155988858,-84.73537604456824,-83.7325905292479,-82.72980501392759,-81.72701949860725,-80.72423398328691,-79.72144846796657,-78.71866295264623,-77.71587743732591,-76.71309192200557,-75.71030640668523,-74.7075208913649,-73.70473537604457,-72.70194986072424,-71.6991643454039,-70.69637883008356,-69.69359331476323,-68.6908077994429,-67.68802228412255,-66.68523676880223,-65.6824512534819,-64.67966573816156,-63.67688022284122,-62.67409470752088,-61.67130919220057,-60.66852367688023,-59.66573816155989,-58.662952646239546,-57.660167130919234,-56.657381615598894,-55.65459610027855,-54.65181058495821,-53.64902506963789,-52.64623955431756,-51.64345403899722,-50.64066852367688,-49.63788300835657,-48.63509749303623,-47.63231197771589,-46.629526462395546,-45.626740947075206,-44.623955431754894,-43.62116991643455,-42.61838440111421,-41.61559888579387,-40.61281337047353,-39.61002785515319,-38.60724233983288,-37.60445682451254,-36.6016713091922,-35.59888579387186,-34.59610027855152,-33.59331476323118,-32.590529247910865,-31.587743732590525,-30.584958217270184,-29.582172701949844,-28.579387186629532,-27.57660167130919,-26.57381615598885,-25.57103064066851,-24.5682451253482,-23.565459610027858,-22.562674094707518,-21.559888579387177,-20.557103064066865,-19.554317548746525,-18.551532033426184,-17.548746518105844,-16.545961002785532,-15.543175487465192,-14.540389972144851,-13.53760445682451,-12.53481894150417,-11.532033426183858,-10.529247910863518,-9.526462395543177,-8.523676880222837,-7.520891364902525,-6.518105849582184,-5.515320334261844,-4.5125348189415035,-3.509749303621163,-2.506963788300851,-1.5041782729805107,-0.5013927576601702,0.5013927576601702,1.5041782729805107,2.506963788300851,3.509749303621163,4.5125348189415035,5.515320334261844,6.518105849582156,7.520891364902525,8.523676880222837,9.526462395543206,10.529247910863518,11.53203342618383,12.534818941504199,13.53760445682451,14.540389972144823,15.543175487465192,16.545961002785504,17.548746518105872,18.551532033426184,19.554317548746496,20.557103064066865,21.559888579387177,22.562674094707546,23.565459610027858,24.56824512534817,25.57103064066854,26.57381615598885,27.576601671309163,28.579387186629532,29.582172701949844,30.584958217270213,31.587743732590525,32.590529247910865,33.593314763231206,34.59610027855152,35.59888579387186,36.6016713091922,37.60445682451254,38.60724233983288,39.61002785515319,40.61281337047353,41.61559888579387,42.61838440111421,43.621169916434525,44.623955431754894,45.626740947075206,46.629526462395546,47.63231197771589,48.6350974930362,49.63788300835657,50.64066852367688,51.64345403899722,52.64623955431756,53.64902506963787,54.65181058495824,55.65459610027855,56.657381615598865,57.660167130919234,58.662952646239546,59.665738161559915,60.66852367688023,61.67130919220054,62.67409470752091,63.67688022284122,64.67966573816153,65.6824512534819,66.68523676880221,67.68802228412258,68.6908077994429,69.6935933147632,70.69637883008357,71.69916434540389,72.70194986072423,73.70473537604457,74.70752089136488,75.71030640668525,76.71309192200556,77.7158774373259,78.71866295264624,79.72144846796658,80.72423398328687,81.72701949860726,82.72980501392755,83.73259052924794,84.73537604456823,85.73816155988857,86.74094707520891,87.74373259052925,88.74651810584959,89.74930362116993,90.75208913649021,91.75487465181061,92.7576601671309,93.76044568245123,94.76323119777157,95.76601671309191,96.76880222841226,97.7715877437326,98.77437325905294,99.77715877437328,100.77994428969362,101.7827298050139,102.78551532033424,103.78830083565458,104.79108635097492,105.79387186629526,106.7966573816156,107.79944289693594,108.80222841225628,109.80501392757657,110.80779944289696,111.81058495821725,112.81337047353765,113.81615598885793,114.81894150417827,115.82172701949861,116.82451253481895,117.82729805013929,118.83008356545963,119.83286908077991,120.83565459610031,121.8384401114206,122.84122562674094,123.84401114206128,124.84679665738162,125.84958217270196,126.8523676880223,127.85515320334258,128.85793871866298,129.86072423398326,130.8635097493036,131.86629526462394,132.86908077994428,133.87186629526462,134.87465181058496,135.8774373259053,136.88022284122565,137.88300835654593,138.88579387186627,139.8885793871866,140.89136490250695,141.8941504178273,142.89693593314763,143.89972144846797,144.9025069637883,145.90529247910865,146.90807799442894,147.91086350974933,148.91364902506962,149.91643454039001,150.9192200557103,151.92200557103064,152.92479108635098,153.92757660167132,154.93036211699166,155.933147632312,156.93593314763228,157.93871866295268,158.94150417827296,159.9442896935933,160.94707520891365,161.949860724234,162.95264623955433,163.95543175487467,164.95821727019495,165.96100278551535,166.96378830083563,167.96657381615597,168.9693593314763,169.97214484679665,170.974930362117,171.97771587743733,172.98050139275767,173.98328690807801,174.9860724233983,175.98885793871864,176.99164345403898,177.99442896935932,178.99721448467966,180,180] ;
            // norm_0_1 = [0,0.002785515320334262,0.005571030640668524,0.008356545961002786,0.011142061281337047,0.013927576601671309,0.016713091922005572,0.019498607242339833,0.022284122562674095,0.025069637883008356,0.027855153203342618,0.03064066852367688,0.033426183844011144,0.036211699164345405,0.03899721448467967,0.04178272980501393,0.04456824512534819,0.04735376044568245,0.05013927576601671,0.052924791086350974,0.055710306406685235,0.0584958217270195,0.06128133704735376,0.06406685236768803,0.06685236768802229,0.06963788300835655,0.07242339832869081,0.07520891364902507,0.07799442896935933,0.0807799442896936,0.08356545961002786,0.08635097493036212,0.08913649025069638,0.09192200557103064,0.0947075208913649,0.09749303621169916,0.10027855153203342,0.10306406685236769,0.10584958217270195,0.10863509749303621,0.11142061281337047,0.11420612813370473,0.116991643454039,0.11977715877437325,0.12256267409470752,0.12534818941504178,0.12813370473537605,0.1309192200557103,0.13370473537604458,0.13649025069637882,0.1392757660167131,0.14206128133704735,0.14484679665738162,0.14763231197771587,0.15041782729805014,0.1532033426183844,0.15598885793871867,0.15877437325905291,0.1615598885793872,0.16434540389972144,0.1671309192200557,0.16991643454038996,0.17270194986072424,0.17548746518105848,0.17827298050139276,0.181058495821727,0.18384401114206128,0.18662952646239556,0.1894150417827298,0.19220055710306408,0.19498607242339833,0.1977715877437326,0.20055710306406685,0.20334261838440112,0.20612813370473537,0.20891364902506965,0.2116991643454039,0.21448467966573817,0.21727019498607242,0.2200557103064067,0.22284122562674094,0.22562674094707522,0.22841225626740946,0.23119777158774374,0.233983286908078,0.23676880222841226,0.2395543175487465,0.24233983286908078,0.24512534818941503,0.2479108635097493,0.25069637883008355,0.25348189415041783,0.2562674094707521,0.2590529247910863,0.2618384401114206,0.2646239554317549,0.26740947075208915,0.27019498607242337,0.27298050139275765,0.2757660167130919,0.2785515320334262,0.28133704735376047,0.2841225626740947,0.28690807799442897,0.28969359331476324,0.2924791086350975,0.29526462395543174,0.298050139275766,0.3008356545961003,0.30362116991643456,0.3064066852367688,0.30919220055710306,0.31197771587743733,0.3147632311977716,0.31754874651810583,0.3203342618384401,0.3231197771587744,0.32590529247910865,0.3286908077994429,0.33147632311977715,0.3342618384401114,0.3370473537604457,0.3398328690807799,0.3426183844011142,0.34540389972144847,0.34818941504178275,0.35097493036211697,0.35376044568245124,0.3565459610027855,0.3593314763231198,0.362116991643454,0.3649025069637883,0.36768802228412256,0.37047353760445684,0.3732590529247911,0.37604456824512533,0.3788300835654596,0.3816155988857939,0.38440111420612816,0.3871866295264624,0.38997214484679665,0.39275766016713093,0.3955431754874652,0.3983286908077994,0.4011142061281337,0.403899721448468,0.40668523676880225,0.40947075208913647,0.41225626740947074,0.415041782729805,0.4178272980501393,0.4206128133704735,0.4233983286908078,0.42618384401114207,0.42896935933147634,0.43175487465181056,0.43454038997214484,0.4373259052924791,0.4401114206128134,0.4428969359331476,0.4456824512534819,0.44846796657381616,0.45125348189415043,0.45403899721448465,0.4568245125348189,0.4596100278551532,0.4623955431754875,0.46518105849582175,0.467966573816156,0.47075208913649025,0.4735376044568245,0.4763231197771588,0.479108635097493,0.4818941504178273,0.48467966573816157,0.48746518105849584,0.49025069637883006,0.49303621169916434,0.4958217270194986,0.4986072423398329,0.5013927576601671,0.5041782729805014,0.5069637883008357,0.5097493036211699,0.5125348189415042,0.5153203342618384,0.5181058495821727,0.520891364902507,0.5236768802228412,0.5264623955431755,0.5292479108635098,0.532033426183844,0.5348189415041783,0.5376044568245125,0.5403899721448467,0.5431754874651811,0.5459610027855153,0.5487465181058496,0.5515320334261838,0.5543175487465181,0.5571030640668524,0.5598885793871866,0.5626740947075209,0.5654596100278552,0.5682451253481894,0.5710306406685237,0.5738161559888579,0.5766016713091922,0.5793871866295265,0.5821727019498607,0.584958217270195,0.5877437325905293,0.5905292479108635,0.5933147632311978,0.596100278551532,0.5988857938718662,0.6016713091922006,0.6044568245125348,0.6072423398328691,0.6100278551532033,0.6128133704735376,0.6155988857938719,0.6183844011142061,0.6211699164345403,0.6239554317548747,0.6267409470752089,0.6295264623955432,0.6323119777158774,0.6350974930362117,0.637883008356546,0.6406685236768802,0.6434540389972145,0.6462395543175488,0.649025069637883,0.6518105849582173,0.6545961002785515,0.6573816155988857,0.6601671309192201,0.6629526462395543,0.6657381615598886,0.6685236768802229,0.6713091922005571,0.6740947075208914,0.6768802228412256,0.6796657381615598,0.6824512534818942,0.6852367688022284,0.6880222841225627,0.6908077994428969,0.6935933147632312,0.6963788300835655,0.6991643454038997,0.7019498607242339,0.7047353760445683,0.7075208913649025,0.7103064066852368,0.713091922005571,0.7158774373259053,0.7186629526462396,0.7214484679665738,0.724233983286908,0.7270194986072424,0.7298050139275766,0.7325905292479109,0.7353760445682451,0.7381615598885793,0.7409470752089137,0.7437325905292479,0.7465181058495822,0.7493036211699164,0.7520891364902507,0.754874651810585,0.7576601671309192,0.7604456824512534,0.7632311977715878,0.766016713091922,0.7688022284122563,0.7715877437325905,0.7743732590529248,0.7771587743732591,0.7799442896935933,0.7827298050139275,0.7855153203342619,0.7883008356545961,0.7910863509749304,0.7938718662952646,0.7966573816155988,0.7994428969359332,0.8022284122562674,0.8050139275766016,0.807799442896936,0.8105849582172702,0.8133704735376045,0.8161559888579387,0.8189415041782729,0.8217270194986073,0.8245125348189415,0.8272980501392758,0.83008356545961,0.8328690807799443,0.8356545961002786,0.8384401114206128,0.841225626740947,0.8440111420612814,0.8467966573816156,0.8495821727019499,0.8523676880222841,0.8551532033426184,0.8579387186629527,0.8607242339832869,0.8635097493036211,0.8662952646239555,0.8690807799442897,0.871866295264624,0.8746518105849582,0.8774373259052924,0.8802228412256268,0.883008356545961,0.8857938718662952,0.8885793871866295,0.8913649025069638,0.8941504178272981,0.8969359331476323,0.8997214484679665,0.9025069637883009,0.9052924791086351,0.9080779944289693,0.9108635097493036,0.9136490250696379,0.9164345403899722,0.9192200557103064,0.9220055710306406,0.924791086350975,0.9275766016713092,0.9303621169916435,0.9331476323119777,0.935933147632312,0.9387186629526463,0.9415041782729805,0.9442896935933147,0.947075208913649,0.9498607242339833,0.9526462395543176,0.9554317548746518,0.958217270194986,0.9610027855153204,0.9637883008356546,0.9665738161559888,0.9693593314763231,0.9721448467966574,0.9749303621169917,0.9777158774373259,0.9805013927576601,0.9832869080779945,0.9860724233983287,0.9888579387186629,0.9916434540389972,0.9944289693593314,0.9972144846796658,1,1];

            x = []
            for (i=0;i<1568;i++) {
                x.push(i)
            }
            y=normalize(x,[0,100])
            var xpt_100 = y
            // norm_10_40.concat(y.reverse())

            var svgns = 'http://www.w3.org/2000/svg';
            var defs = document.createElementNS(svgns, 'defs');
 

            var polyColor_1_offset =33.33 
            var polyColor_2_offset = 33.33*2
            var polyColor_3_offset = 33.33*3

            var lOrder=[
            5,5,5,5,4,4,5,5,5,5,   4,4,3,3,5,5,5,5,4,4,   5,5,5,5,4,4,3,3,2,2,   5,5,5,5,4,4,5,5,5,5,   4,4,3,3,5,5,5,5,4,4,   
            5,5,5,5,4,4,3,3,2,2,   1,1,5,5,5,5,4,4,5,5,   5,5,4,4,3,3,5,5,5,5,   4,4,5,5,5,5,4,4,3,3,   2,2,5,5,5,5,4,4,5,5,   
            5,5,4,4,3,3,5,5,5,5,   4,4,5,5,5,5,4,4,3,3,   2,2,1,1,0,0,0
            ]

            const DEF_pensize         = [13,11, 7,5, 3, 2, 1]
            const DEF_pre_maxlengths  = [130,70,50,30,20,10]


            var pensize         = []
            //? In javascript, you can't say a[]= b=[] and have 2 variables, as a[] is only a reference to b[], and as there
            //? is no way to assign-by-value  for arrays and object, you have to do this bullshit
            for (i=0;i<DEF_pensize.length;i++) {
                pensize.push(DEF_pensize[i])
            }
            var pre_maxlengths  = []
            for (i=0;i<DEF_pre_maxlengths.length;i++) {
                pensize.push(DEF_pre_maxlengths[i])
            }

            // var opacities       = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]
            var opacities       = [1,1,1,1,1,1]
            var maxlengths      = [0,0,0,0,0,0]
            var mladj           = [0,0,0,0,0,0]

            //? make the lengths all metal-ratio based
            mr1 = 0.618033989;
            //* mr1 = 0.414213562;
            //* mr1 = 0.302775638;
            //* mr1 = 0.236067978;
            //* mr1 = 0.192582404;
            //v mr1 = 0.162277660;

            pre_maxlengths[0] = 130
            for (let i = 1; i<6; i++) {
                pre_maxlengths[i] = (pre_maxlengths[i-1] * mr1)
            }
            //@ DEBUG
            // pre_maxlengths  = [1,1,1,1,1,1]

//@ dont need these anymore?
//            var org_x1 = 0
//            var org_y1 = 0
//            var org_x2 = 0
//            var org_y2 = 0



            var gens        = 6
            var gen         = 0
            var start_x     = 0
            var start_y     = 0
            var rotation    = -90
            var inf         = 10e10 
            var ON = true
            var OFF = false

            var this_length
            var start_x
            var start_y
            var branch_angle
            var last_angle
            /* 
           ──────────────────────────────────────────────── 
            DEFAULTS w/ OVERRIDES
               FAST, SMOOTH
               ?c=-0002&i=0.003 
                   with CIRCLES , ROTATING SPECTRUM 
                   ?c=-0002&i=0.003&l=1&k=1 
            DOTS only
               ?c=-0002&i=0.003&l=1&k=1&a1=0&a2=0&a3=0&a4=0&a5=0&a6=0 
               with POLYZ
                   ?c=38&i=0.003&l=1&k=1&a1=0&a2=0&a3=0&a4=0&a5=0&a6=0&n=1 
                   ?c=38&i=0.003&l=1&k=1&a1=0&a2=0&a3=0&a4=0&a5=0&a6=0&n=3 
               and CIRCLESS
                   ?c=38&i=0.003&l=14&k=1&a1=0&a2=0&a3=0&a4=0&a5=0&a6=0&n=3 
            DOTS with SOFT POLY1
               ?c=-2&i=0.003&l=2&k=1&a1=0&a2=0&a3=0&a4=0&a5=0&a6=0&n=1&o=0.04
            TWINKLING DOTS
               ?c=-2&i=0.003&l=5&k=1&a1=0&a2=0&a3=0&a4=0&a5=0&a6=0&n=4&o=0.32 

            CROSSUMN DOT/PLOY
                file:///home/jw/store/src/music/clock_1.svg?c=1000&i=7.5&l=8&k=0&q=1&a1=1&a2=1&a3=1&a4=1&a5=1&a6=1&n=1&o=0.29&g=1&p=0.24
            ────────────────────────────────────────────────
            */


            //% █████████████ ADJUSTMENTS █████████████
            //% let noteseed = (54+tree_counter+ rotation)%108+108


            //!  ──────────────────────────────────────────────── 
            //? ALT CHARACTERS
            //  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  <- all
            //          E F   H                                      <- USED BY BRAVE
            // A  B C       G   I J K       O P   R S T U V W X   Z  <- USED BY THIS APP 
            //%       D               L M N                     Y    <- AVAILABLE
            //! ──────────────────────────────────────────────── 
    // KeyD only works once... using KeyJ is OK
    // KeyH seems to not reapond at all


            //@ ARGS
            const DEF_loop_delay      = 1000;
            const DEF_iangle          = 180;
            const DEF_deg_adj         = 1;//180/Math.PI;
            const DEF_circle_radius   = 12;
            const DEF_cycle_circles   = 0; 
            const DEF_cycle_colors    = 0;
            const DEF_show_0          = 1;
            const DEF_show_1          = 1;
            const DEF_show_2          = 1;
            const DEF_show_3          = 1;
            const DEF_show_4          = 1;
            const DEF_show_5          = 1;
            const DEF_show_all_lines  = 1;
            const DEF_poly_opacity    = 1; 
            const DEF_circle_opacity  = 1.0;  
            const DEF_cycle_audio     = 1;
            const DEF_cycle_poly      = 0;
            const DEF_cycle_path      = 0; 
            const DEF_cycle_dataset   = 0;
            const DEF_cycle_preset    = 0;
            const DEF_cycle_vars      = 0;
            const DEF_merge_count     = 0;
            const DEF_fullscreen      = 0;
            const DEF_rolling_presets = 0;
            const DEF_zoomin          = 0;
            const DEF_screensave      = 0;


            //@ ARGS
            var loop_delay      = parseFloat(qget("up",DEF_loop_delay))
            var iangle          = parseFloat(qget("ia",DEF_iangle))
            var deg_adj         = parseFloat(qget("de",DEF_deg_adj))
            var poly_opacity    = parseFloat(qget("aO",DEF_poly_opacity))  
            var circle_opacity  = parseFloat(qget("aX",DEF_circle_opacity))  

            var circle_radius   = parseInt(qget("aN",  DEF_circle_radius))
            var cycle_circles   = parseInt(qget("aM" , DEF_cycle_circles))
            var cycle_colors    = parseInt(qget("aR",  DEF_cycle_colors))
            var show_0          = parseInt(qget("ca1", DEF_show_0))
            var show_1          = parseInt(qget("ca2", DEF_show_1))
            var show_2          = parseInt(qget("ca3", DEF_show_2))
            var show_3          = parseInt(qget("ca4", DEF_show_3))
            var show_4          = parseInt(qget("ca5", DEF_show_4))
            var show_5          = parseInt(qget("ca6", DEF_show_5))
            var show_all_lines  = parseInt(qget("ca0", DEF_show_all_lines))
            var cycle_audio     = parseInt(qget("aG",  DEF_cycle_audio))  
            var cycle_poly      = parseInt(qget("aV",  DEF_cycle_poly))  //? default polygon is no polygons
            var cycle_path      = parseInt(qget("aK",  DEF_cycle_path))  
            var cycle_dataset   = parseInt(qget("aU",  DEF_cycle_dataset))  
            var cycle_preset    = parseInt(qget("aA",  DEF_cycle_preset))  
            var cycle_vars      = parseInt(qget("aC",  DEF_cycle_vars))  
            var merge_count     = parseInt(qget("aS",  DEF_merge_count))  
            var fullscreen      = parseInt(qget("FS",  DEF_fullscreen))  
            var zoomin          = parseInt(qget("aT",  DEF_zoomin))  
            var screensave      = parseInt(qget("aP",  DEF_screensave))  
            //? hidden params
            var rolling_presets  = parseInt(qget("xA", DEF_rolling_presets))  

            var preset_changed  = false //? need to keep track when the cycle preset changes for one-off loads


        //! ┌───────────────────────────────────────────────
        //! │ DEFAULTS
        //! └───────────────────────────────────────────────
            var _VERSION = 3.48
            var _DEV_MODE = true

            var gMin_x = 0
            var gMax_x = 0
            var gMin_y = 0
            var gMax_y = 0

            var _ = "" //? convenience var for menus
            var last_loop_delay   = loop_delay
            var line_thickness    = 1         //? adjustment factor
            var linelength_adj    = 1.8         //? adjustment factor
            var sel_bg            = 0         //? toggle background color... 1= white 0=black
            var bg_color          = "black"   //? default bg color
            var tree_counter      = 0         //? just a simple +1 tree_counter
            var branch_counter    = 0         //? just a simple +1 tree_counter
            var degjump           = 5         //? jumep foward by 5 degrees
            var sound_initialized = 0
            var sound_on          = 0
            // var rt_angle        = 1         //? real-time astarting angle based on epoch seconds

            var names_of_circles        =["OFF","white","palette","random"]
            var names_of_datasets       =["Standard","Bez Parallel","Bez Serial"]
            var names_of_paths          =["OFF","True-open","True-closed","complex #1","complex #2","complex #4","super complex",]
            var names_of_polys          =["OFF","cos/sin-10","CiN(cos*sin)-10","DeltasCos(rot)","Petal"]
            var names_of_audios         =["OFF","Long","Short","Piano","Long+Short"]
            var names_of_vars           =["OFF","All","No-poly","No color change"]
            var names_of_show_all_lines =["Hide","Show"]


            //? the number of each of these types, needed for MOD-cycling 
            var num_of_paths    = 6 //? 6-count, starts at 1, 0=none
            var num_of_polys    = 3 //? 4-count, starts at 1, 0=none
            var num_of_audios   = 3 //? 4-count, starts at 0
            var num_of_datasets = 3 //? 3-count, starts at 0
            var num_of_presets  = preqs.length-1; //? starts at ??
            var num_of_colors   = names_of_colors.length-1 //? 4-count, starts at 0
            var num_of_circles  = 4 //? 3-count, starts at 1, 0=none
            var num_of_vars     = names_of_vars.length //? 2-count, starts at 0


            var snapshot        = 0

            var mCIRdefs        = [false,false,false,false,false,false]
            var mCIRgradient    = [false,false,false,false,false,false]
            var mCIRcircle      = [false,false,false,false,false,false]
            var mCIRstops       = [false,false,false,false,false,false]
            var mCIRcolor       = [false,false,false,false,false,false]

            var mLINEdefs        = [false,false,false,false,false,false]
            var mLINEgradient    = [false,false,false,false,false,false]
            var mLINEline        = [false,false,false,false,false,false]
            var mLINEstops       = [false,false,false,false,false,false]
            var mLINEcolor       = [false,false,false,false,false,false]

            pause                = 0

            var show_message     = false
            var showtext         = true

            var last_pos         = 0
            var mloc             = false

            var this_length      = maxlengths[lOrder[gen]]
            var last_angle       = branch_angle
            var rnum             = 0;


            var menu_fontsize       = "18px"
            var menu_spacing        = 22
            var menu_fontweight     ="600"
            var menu_fontclr        ="white"
            var menuCols            = []
            var menuAltCols         = []

            //? default column positions
            menuCols.push(0)                //? qs val
            menuCols.push(menuCols[0]+85)   //? key
            menuCols.push(menuCols[1]+110)  //? desc
            menuCols.push(menuCols[2]+220)  //? counters
            menuCols.push(menuCols[3]+110)

            menuAltCols.push(0)
            menuAltCols.push(menuAltCols[0]+30)
            menuAltCols.push(menuAltCols[1]+100)
            menuAltCols.push(menuAltCols[2]+100)
            menuAltCols.push(menuAltCols[3]+130)

            // var poly_clr_idx = 0
            var idx1 = tree_counter%360
            var idx2 = tree_counter*30%360
            var idx3 = tree_counter*60%360

            var idx4 = tree_counter%360
            var idx5 = tree_counter*33%360
            var idx6 = tree_counter*66%360

            //? calculate the duration - currently not working properly
            tt = cycletimes(loop_delay, deg_adj, genangLEFT, genangRIGHT)
            var cycletime       = tt['cycletime']
            var tot_cycletime   = tt['tot_cycletime']
            var tot_images      = tt['tot_images']

            //? define SVG element and do some intiial stuff 
            const eleSvg        = document.querySelector('svg');  
            eleSvg.innerText    = `transform: translate(0,0)`;
            var pt              = eleSvg.createSVGPoint();
            eleSvg.dispatchEvent(new Event('click'));
            let point = eleSvg.createSVGPoint();
            
            //? these x,y points determine where the angle starts from- 
            point.y = 0 //clientY;
            point.x = 0 //;

             //% █████████████ ADJUSTMENTS █████████████
            // point.x = nowsecs();
            // branch_angle = (point.x/2) % 360

//            console.log(iangle)
            if (iangle == -1) {
                iangle = nowsecs()%360;
            }

            branch_angle = iangle

            path_width = 1
            //? create global audiocontext
            var context = false //new AudioContext()
            //? initial 'scale'
            var notes = getHarmoniousNotes(54,8)  // 54 comes from the 432 set of frequencies
            notes.reverse() //? reverse to match frequenciesa with levels
            var notes21 = getHarmoniousNotes(54,21)  // 54 comes from the 432 set of frequencies

            var fullary_right = []
            var fullary_left = []
            var xfullary_right = [{'g':7,'x':0,'y':0}]
            var xfullary_left = [{'g':7,'x':0,'y':0}]

            notes6 = []
            for (let i = 0; i<notes21.length-3; i=i+3) {
                notes6.push([
                    notes21[i],
                    notes21[i+1],
                    notes21[i+2]
                    ]
                )
            }
            //! 0   CONNECTING  Socket has been created. The connection is not yet open.
            //! 1   OPEN        The connection is open and ready to communicate.
            //! 2   CLOSING     The connection is in the process of closing.
            //! 3   CLOSED      The connection is closed or couldn't be opened.
            const socket = new WebSocket('ws://localhost:8000');
            socket.addEventListener('open', function (event) {
                socket.send('Connection Established');
            });
//            socket.addEventListener('message', function (event) {
//                // console.log("event_data:",event.data);
//            });
            const msgsend = function(mtype) {
                let _c = tree_counter.toString().padStart(4,'0');
                let _a = (Math.round(branch_angle)%180).toString().padStart(3,'0');
                msg = mtype+":"+_c+":"+_a;
                socket.send(msg);
            }
            const consoleMsg = () => {socket.send("console:")}
            if (socket.readyState == 1) {socket.send('msg');}
            //  else {
            //     console.log("readyState = ",socket.readyState)
            // }
            //! ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ START LOOP ▄▄▄▄▄▄▄
            drawTree(branch_angle, rotation);
            timer.start(function() {
                branch_angle = branch_angle + deg_adj;
                drawTree(branch_angle,rotation);
                tree_counter++;
                fullary_right = [];
                fullary_left = [];
                xfullary_right = [{'g':7,'x':0,'y':0}];
                xfullary_left = [{'g':7,'x':0,'y':0}];
                gMin_x = 0;
                gMax_x = 0;
                gMin_y = 0;
                gMax_y = 0
 
                if (screensave == 1) {msgsend("saveScreen:"+branch_angle+":"+rotation)}
//                consoleMsg("console:")

            },loop_delay);
            //! ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

            //@ vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            //@ INSERT LISTENERS HERE (and comment out script below)
            //@ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            //@ %PRAGMA:insert:clock_1_listeners.js:

            ]]>
            </script>

            //@ %PRAGMA:delete_next_line:0
            <script type="text/javascript" xlink:href="clock_1_listeners.js" xlink:actuate="onLoad" xlink:show="other" xlink:type="simple" />    


            // <script src="canvas2image.js"></script>
        </svg>
        <!--/canvas-->
    <!-- /body -->
<!-- /html -->

     